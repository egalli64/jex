/*
 * 3201. Find the Maximum Length of Valid Subsequence I - https://leetcode.com/problems/find-the-maximum-length-of-valid-subsequence-i/description/
 * LeetCode Medium Problems - https://leetcode.com/problemset/?difficulty=MEDIUM
 *
 * My repository with solutions - https://github.com/egalli64/jex/
 */
package com.leetcode.medium;

/**
 * Saying that a subsequence is:
 * <ul>
 *     <li>generated by discarding elements from the original sequence in any place, keeping the original order.</li>
 *     <li>valid if the parity of each couple is the same</li>
 * </ul>
 * Return the length of the longest valid subsequence
 */
public class FindTheMaximumLengthOfValidSubsequenceI {
    public int maximumLength(int[] nums) {
        boolean isPrevEven = nums[0] % 2 == 0;
        int countEven = isPrevEven ? 1 : 0;
        int countOdd = isPrevEven ? 0 : 1;
        int countAlternate = 1;

        for (int i = 1; i < nums.length; i++) {
            boolean curEven = nums[i] % 2 == 0;
            if (curEven) {
                countEven += 1;
            } else {
                countOdd += 1;
            }
            if (isPrevEven != curEven) {
                countAlternate += 1;
                isPrevEven = curEven;
            }
        }
        return Math.max(Math.max(countEven, countOdd), countAlternate);
    }
}
